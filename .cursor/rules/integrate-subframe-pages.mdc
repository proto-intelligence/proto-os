---
description: 
globs: 
alwaysApply: false
---
# 🧠 Cursor Rule: Integrate Subframe Pages into Production Frontend

For the route subdirectory provided inside `src/app` that contains a `generated/` folder with one or more `page.tsx` files created using Subframe, follow this reproducible strategy to convert them into clean, maintainable frontend code.

---

## 🔹 Step 1: Isolate Subframe Code

Move all raw Subframe `page.tsx` files into a `generated/` folder:

```
src/app/<route>/generated/
```

- This keeps generated code separated from production code.
- Never modify files directly inside `generated/`.

---

## 🔹 Step 2: Extract Visual Components into `components/ui`

For each large visual section inside the Subframe page:

- Extract it into a reusable UI component inside:

```
src/app/<route>/components/ui/
```

- Name the component based on its function (e.g., `ProfileForm.tsx`, `SettingsCard.tsx`).
- These components should:
  - Be **presentational only**
  - Accept props
  - **Not include any hooks or state**

---

## 🔹 Step 3: Create a `views/` Folder for Business Logic

Create a folder for view-level smart components:

```
src/app/<route>/views/
```

Inside it, create a file like `SettingsPageView.tsx` that:

- Uses mock **business logic hooks** (e.g., `useMockUserSettings`, `useMockUpdateSettings`)
- Implement these mocks hooks as stubs
- Passes mock data and callbacks to UI components as props
- Handles all loading/error states if needed

---

## 🔹 Step 4: Create the Final `page.tsx`

Create or update the `page.tsx` file in the route:

```tsx
// src/app/settings/page.tsx
import { SettingsPageView } from './views/SettingsPageView';

export default function SettingsPage() {
  return <SettingsPageView />;
}
```

This keeps the route entry file simple and declarative.

---

## ✅ Folder Structure Overview

```
src/app/settings/
├── generated/                ← Subframe-generated pages
├── components/
│   └── ui/                   ← Stateless presentational components
└── page.tsx                 ← Route entry point
```
